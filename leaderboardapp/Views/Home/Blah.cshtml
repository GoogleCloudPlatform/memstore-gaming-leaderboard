@{
    ViewData["Title"] = "Blah";
    Layout = "~/Views/Shared/_BootstrapLayout.cshtml";
}

<div id="app" class="container-fluid">
    <div>
        <h3 class="subdued">Username:&nbsp;<span class="text-success" v-html="username"></span></h3>
        <div>
            <input class="form-control" type="text" ref="name" v-model="username" placeholder="Enter username to play" autofocus />
        </div>
    </div>
    <div class="row">
        <div class="col" v-if="hasName()">
            <div class="card">
                <div class="card-header">
                    </span><h4 v-text="message"></h4>
                </div>
                <ul class="list-group list-group-flush question-group" style="margin-left: 10px;">
                    <li v-for="(item, index) in questions" class="list-group-item">
                        <input class="form-check-input" v-bind:id="'q_' + index" v-model="item.selected" type="checkbox" />
                        <label v-bind:for="'q_' + index"></label>{{item.question}}
                    </li>
                </ul>
                <div class="btn-group">
                    <button type="button" class="btn btn-success" v-on:click="submit">Submit</button>
                    <button type="button" class="btn btn-secondary" v-on:click="skip">Skip</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row" style="margin-top: 20px; margin-left: 5px;">
        <div class="col">
            <ul class="nav nav-pills nav-fill">
                <li class="nav-item">
                    <a class="nav-link" v-bind:class="top10BtnClass" v-on:click="undoCentered" href="javascript:void(0)">Top 11</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" v-bind:class="centeredBtnClass" href="javascript:void(0)" v-on:click="doCentered">Centered +/-5</a>
                </li>
            </ul>
            <table class="table">
                <thead>
                    <tr>
                        <th></th>
                        <th>Username</th>
                        <th>Score</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(item, index) in leaderboard">
                        <td v-text="item.rank+1"></td>
                        <td data-label="Username" v-text="getUsernameWithAnnotation(item.playerName)"></td>
                        <td data-label="Score" v-text="item.score"></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts  {
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.js"></script>
<script>
    var app = new Vue({
        el: '#app',
        data: {
            message: 'Select correct choices:',
            questions: [],
            username: '',
            leaderboard: [],
            centered: false
        },
        computed: {
            centeredBtnClass: function () {
                if (!this.hasName()) {
                    return 'disabled';
                }

                return this.centered ? 'active' : '';
            },
            top10BtnClass: function () {
                return this.centered ? '' : 'active';
            }
        },
        watch: {
            username: function (newUsername, oldUsername) {
                if (!newUsername) {
                    this.centered = false;
                    this.fetchLeaderboard();
                } else {
                    if (this.centered && newUsername != oldUsername) {
                        this.fetchLeaderboard();
                    }
                }
            }
        },
        async created() {
            if (!this.hasName()) {
                this.$nextTick(() => this.$refs.name.focus())
            }

            var lbPromise = this.fetchLeaderboard();
            var qPromise = this.fetchQuestions();

            this.questions = await qPromise;
            await lbPromise;
        },
        methods: {
            fetchQuestions: async () => {
                try {
                    var getUrl = "/api/qa";
                    const response = await axios.get(getUrl);
                    return response.data;
                } catch (error) {
                    console.error(error);
                    return [];
                }
            },
            fetchLeaderboard: function () {
                // [START FETCHSCORES_CLIENT]
                var pThis = this;
                var getUrl = "/api/score/retrievescores";

                (async () => {
                    try {
                        var params = {
                            centerKey: '',
                            offset: 0,
                            numScores: 11
                        };

                        if (pThis.centered) {
                            params.centerKey = pThis.username;
                            params.offset = -5;
                            params.numScores = 11;
                        }

                        const response = await axios.get(getUrl, { params: params });
                        pThis.leaderboard = response.data;
                    } catch (error) {
                        console.error(error);
                        return []
                    }
                })();
                // [END FETCHSCORES_CLIENT]
            },
            getUsernameWithAnnotation: function (username) {
                if (this.centered) {
                    if (this.username == username) {
                        return username + "*";
                    }
                }

                return username;
            },
            doCentered: function () {
                this.centered = true;
                this.fetchLeaderboard();
            },
            undoCentered: function () {
                this.centered = false;
                this.fetchLeaderboard();
            },
            submit: function () {
                // [START POSTSCORE_CLIENT]
                var scoreInfo = {
                    playerName: this.username,
                    score: this.calculateScore().toFixed(2)
                };

                var pThis = this;

                var postUrl = "/api/score";
                (async () => {
                    try {
                        await axios.post(postUrl, scoreInfo)
                    } catch (error) {
                        console.error(error);
                    }

                    var lbPromise = pThis.fetchLeaderboard();
                    var qPromise = pThis.fetchQuestions();

                    pThis.questions = await qPromise;
                    await lbPromise;
                })();
                // [END POSTSCORE_CLIENT]
            },
            skip: function () {
                var pThis = this;

                (async () => pThis.questions = await pThis.fetchQuestions())();
            },
            calculateScore: function () {
                var score = 0.0;
                var numberCorrect = 0;
                var i = 0;
                if (this.questions && this.questions.length > 0) {
                    for (i = 0; i < this.questions.length; i++) {
                        if (this.questions[i].selected === this.questions[i].isCorrect) {
                            numberCorrect += 1;
                        }
                    }
                }

                score = numberCorrect / this.questions.length * 100;

                return score;
            },
            hasName: function () {
                if (this.username) {
                    return true;
                } else {
                    return false;
                }
            }
        }
    });
</script>
}